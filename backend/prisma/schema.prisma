// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int            @id @default(autoincrement())
  username    String         @unique
  password    String
  createdAt   DateTime       @default(now())
  messages    Message[]
  chatRooms   ChatRoomUser[]
  inviteCodes InviteCode[]
}

model ChatRoom {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  messages  Message[]
  users     ChatRoomUser[]
  inviteCodes InviteCode[]
}

model ChatRoomUser {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int

  @@unique([userId, chatRoomId]) // prevent duplicate membership
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
}

model InviteCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
}